type Query {
  getUser(id: ID!): User
  searchUsers(query: String, limit: Int): [User]
  users: [User!]!
  currentUser: User
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(id: ID!, input: UpdateUserInput!): User
  deleteUser(id: ID!): Boolean
}

type Subscription {
  userUpdated(id: ID!): User
  userCreated: User
}

type User {
  id: ID!
  name: String
  email: String!
  profilePicture: String
  posts: [Post!]
  role: UserRole
  settings: UserSettings
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Post {
  id: ID!
  title: String!
  content: String
  author: User!
  comments: [Comment!]
  tags: [String!]
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Comment {
  id: ID!
  content: String!
  author: User!
  post: Post!
  createdAt: DateTime!
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

type UserSettings {
  theme: Theme
  notifications: Boolean!
  language: String
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

input CreateUserInput {
  name: String!
  email: String!
  role: UserRole
  settings: UserSettingsInput
}

input UpdateUserInput {
  name: String
  email: String
  role: UserRole
  settings: UserSettingsInput
}

input UserSettingsInput {
  theme: Theme
  notifications: Boolean
  language: String
}

scalar DateTime

interface Node {
  id: ID!
}

union SearchResult = User | Post

directive @deprecated(reason: String) on FIELD_DEFINITION
directive @auth(requires: UserRole) on FIELD_DEFINITION
